// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__onCreateInputNewFlowDataStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get receiver(): Address {
    return this[1].toAddress();
  }

  get flowOperator(): Address {
    return this[2].toAddress();
  }

  get flowRate(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__onDeleteInputUpdatedFlowDataStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get receiver(): Address {
    return this[1].toAddress();
  }

  get flowOperator(): Address {
    return this[2].toAddress();
  }

  get flowRate(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__onUpdateInputParam1Struct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get receiver(): Address {
    return this[1].toAddress();
  }

  get flowOperator(): Address {
    return this[2].toAddress();
  }

  get flowRate(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseUrl(): string {
    let result = super.call("baseUrl", "baseUrl():(string)", []);

    return result[0].toString();
  }

  try_baseUrl(): ethereum.CallResult<string> {
    let result = super.tryCall("baseUrl", "baseUrl():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  burn(token: Address, sender: Address, receiver: Address): boolean {
    let result = super.call("burn", "burn(address,address,address):(bool)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(sender),
      ethereum.Value.fromAddress(receiver)
    ]);

    return result[0].toBoolean();
  }

  try_burn(
    token: Address,
    sender: Address,
    receiver: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("burn", "burn(address,address,address):(bool)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(sender),
      ethereum.Value.fromAddress(receiver)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTokenId(token: Address, sender: Address, receiver: Address): BigInt {
    let result = super.call(
      "getTokenId",
      "getTokenId(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokenId(
    token: Address,
    sender: Address,
    receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenId",
      "getTokenId(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(token: Address, sender: Address, receiver: Address): boolean {
    let result = super.call("mint", "mint(address,address,address):(bool)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(sender),
      ethereum.Value.fromAddress(receiver)
    ]);

    return result[0].toBoolean();
  }

  try_mint(
    token: Address,
    sender: Address,
    receiver: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,address,address):(bool)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(sender),
      ethereum.Value.fromAddress(receiver)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onCreate(
    token: Address,
    newFlowData: Contract__onCreateInputNewFlowDataStruct
  ): boolean {
    let result = super.call(
      "onCreate",
      "onCreate(address,(address,address,address,int96)):(bool)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromTuple(newFlowData)]
    );

    return result[0].toBoolean();
  }

  try_onCreate(
    token: Address,
    newFlowData: Contract__onCreateInputNewFlowDataStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onCreate",
      "onCreate(address,(address,address,address,int96)):(bool)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromTuple(newFlowData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onDelete(
    token: Address,
    updatedFlowData: Contract__onDeleteInputUpdatedFlowDataStruct,
    param2: BigInt
  ): boolean {
    let result = super.call(
      "onDelete",
      "onDelete(address,(address,address,address,int96),int96):(bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromTuple(updatedFlowData),
        ethereum.Value.fromSignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_onDelete(
    token: Address,
    updatedFlowData: Contract__onDeleteInputUpdatedFlowDataStruct,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onDelete",
      "onDelete(address,(address,address,address,int96),int96):(bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromTuple(updatedFlowData),
        ethereum.Value.fromSignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onUpdate(
    param0: Address,
    param1: Contract__onUpdateInputParam1Struct,
    param2: BigInt
  ): boolean {
    let result = super.call(
      "onUpdate",
      "onUpdate(address,(address,address,address,int96),int96):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromSignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_onUpdate(
    param0: Address,
    param1: Contract__onUpdateInputParam1Struct,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onUpdate",
      "onUpdate(address,(address,address,address,int96),int96):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromSignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOf(id: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenCnt(): BigInt {
    let result = super.call("tokenCnt", "tokenCnt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenCnt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCnt", "tokenCnt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(id: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_tokenURI(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cfa_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnCreateCall extends ethereum.Call {
  get inputs(): OnCreateCall__Inputs {
    return new OnCreateCall__Inputs(this);
  }

  get outputs(): OnCreateCall__Outputs {
    return new OnCreateCall__Outputs(this);
  }
}

export class OnCreateCall__Inputs {
  _call: OnCreateCall;

  constructor(call: OnCreateCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newFlowData(): OnCreateCallNewFlowDataStruct {
    return changetype<OnCreateCallNewFlowDataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class OnCreateCall__Outputs {
  _call: OnCreateCall;

  constructor(call: OnCreateCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnCreateCallNewFlowDataStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get receiver(): Address {
    return this[1].toAddress();
  }

  get flowOperator(): Address {
    return this[2].toAddress();
  }

  get flowRate(): BigInt {
    return this[3].toBigInt();
  }
}

export class OnDeleteCall extends ethereum.Call {
  get inputs(): OnDeleteCall__Inputs {
    return new OnDeleteCall__Inputs(this);
  }

  get outputs(): OnDeleteCall__Outputs {
    return new OnDeleteCall__Outputs(this);
  }
}

export class OnDeleteCall__Inputs {
  _call: OnDeleteCall;

  constructor(call: OnDeleteCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get updatedFlowData(): OnDeleteCallUpdatedFlowDataStruct {
    return changetype<OnDeleteCallUpdatedFlowDataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnDeleteCall__Outputs {
  _call: OnDeleteCall;

  constructor(call: OnDeleteCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnDeleteCallUpdatedFlowDataStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get receiver(): Address {
    return this[1].toAddress();
  }

  get flowOperator(): Address {
    return this[2].toAddress();
  }

  get flowRate(): BigInt {
    return this[3].toBigInt();
  }
}
